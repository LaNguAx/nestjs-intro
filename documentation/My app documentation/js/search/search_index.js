var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.112,1,1.881]],["body/controllers/AppController.html",[0,1.848,1,3.126,2,1.512,3,0.58,4,0.506,5,0.506,6,3.379,7,0.709,8,0.037,9,1.02,10,2.698,11,3.379,12,0.58,13,0.077,14,2.276,15,1.842,16,0.031,17,0.031]],["title/modules/AppModule.html",[18,1.112,19,1.881]],["body/modules/AppModule.html",[1,2.9,2,1.505,3,0.422,4,0.368,5,0.368,7,0.764,8,0.037,9,0.743,10,2.692,11,2.46,12,0.422,13,0.056,16,0.025,17,0.025,18,1.715,19,3.667,20,1.341,21,1.341,22,1.657,23,1.657,24,1.341,25,2.582,26,1.657,27,2.46,28,2.46,29,2.46,30,2.692,31,3,32,2.428,33,2.266,34,1.657,35,1.487,36,2.98,37,2.545,38,2.98,39,2.98,40,2.98,41,2.98]],["title/injectables/AppService.html",[10,1.503,42,1.112]],["body/injectables/AppService.html",[3,0.556,4,0.486,5,0.486,7,0.556,8,0.037,9,0.979,10,2.435,12,0.556,13,0.074,16,0.03,17,0.03,42,1.802,43,2.184,44,3.242,45,0.883,46,2.435,47,5.552,48,1.194,49,3.928,50,1.96,51,1.802,52,1.96,53,3.928,54,3.242]],["title/controllers/AuthController.html",[0,1.112,55,1.881]],["body/controllers/AuthController.html",[0,1.496,2,1.496,3,0.574,4,0.501,5,0.501,7,0.704,8,0.037,9,1.01,12,0.574,13,0.076,14,2.252,15,1.823,16,0.031,17,0.031,55,3.106,56,3.343,57,2.878,58,4.05,59,2.422,60,3.343,61,4.05]],["title/modules/AuthModule.html",[18,1.112,30,1.503]],["body/modules/AuthModule.html",[2,1.592,3,0.459,4,0.401,5,0.401,7,0.731,8,0.037,9,0.808,12,0.459,13,0.061,16,0.027,17,0.027,18,1.789,20,1.459,21,1.459,22,1.802,23,1.802,24,1.459,25,2.694,26,2.694,30,2.816,32,1.94,33,2.397,34,1.802,35,1.617,37,2.024,55,3.026,59,2.678,60,2.675,62,2.675,63,2.675,64,2.675,65,3.241,66,2.693,67,3.241,68,2.675]],["title/injectables/AuthService.html",[42,1.112,59,1.356]],["body/injectables/AuthService.html",[3,0.396,4,0.346,5,0.346,7,0.552,8,0.038,9,0.697,12,0.396,13,0.053,15,1.259,16,0.024,17,0.024,42,1.441,43,1.556,45,0.629,46,1.946,48,1.365,50,1.946,51,2.104,52,1.946,59,1.756,66,1.748,69,2.309,70,2.942,71,4.01,72,4.491,73,2.771,74,2.309,75,2.212,76,2.798,77,2.169,78,2.169,79,1.186,80,1.756,81,2.798,82,2.798,83,3.901,84,3.707,85,2.805,86,2.798,87,1.988,88,2.309,89,2.309,90,2.309,91,2.309,92,2.309,93,2.436,94,2.798,95,2.798,96,1.988,97,2.798,98,2.798,99,2.798,100,2.309]],["title/classes/CreatePostDto.html",[13,0.057,101,1.675]],["body/classes/CreatePostDto.html",[3,0.156,4,0.137,5,0.137,7,0.505,8,0.037,12,0.156,13,0.046,16,0.012,17,0.012,45,0.248,48,1.32,51,1.768,79,1.577,80,1.955,100,2.945,101,1.049,102,0.497,103,3.179,104,2.297,105,0.785,106,1.111,107,2.945,108,2.468,109,2.468,110,2.468,111,2.468,112,2.468,113,3.811,114,2.328,115,3.276,116,2.704,117,1.955,118,2.704,119,3.348,120,1.557,121,1.886,122,1.105,123,1.105,124,1.886,125,1.886,126,2.918,127,1.105,128,1.105,129,1.822,130,1.105,131,1.886,132,1.557,133,1.557,134,1.913,135,2.328,136,1.886,137,1.105,138,1.886,139,1.105,140,1.105,141,1.105,142,2.408,143,2.408,144,1.178,145,1.557,146,1.557,147,2.918,148,1.105,149,1.105,150,2.408,151,1.886,152,2.408,153,1.886,154,1.557,155,1.105,156,1.105,157,1.886,158,1.886,159,2.468,160,1.886,161,1.886,162,1.886,163,1.886,164,1.886,165,1.105,166,1.105,167,1.822,168,2.704,169,2.704,170,1.886,171,2.704,172,1.105,173,2.408,174,2.408,175,1.557,176,1.886,177,1.886,178,1.886,179,1.886,180,1.886,181,1.105,182,2.408,183,2.408,184,1.557,185,1.557,186,1.105,187,1.105,188,1.105,189,1.105,190,3.568,191,1.105,192,1.105,193,1.886,194,1.557,195,1.105,196,1.105,197,2.468,198,1.886,199,1.105,200,1.886,201,2.046,202,2.708,203,2.328,204,1.886,205,0.912,206,1.886,207,0.551,208,1.886,209,1.105,210,1.105,211,0.69,212,1.105,213,0.785,214,2.704,215,3.146,216,0.551,217,1.886,218,1.105,219,2.918,220,1.105,221,2.468,222,1.105,223,1.105,224,1.105,225,1.105,226,1.105,227,0.912,228,1.753,229,1.105,230,2.073,231,1.105,232,0.912,233,1.886,234,1.105,235,0.912,236,1.105]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.057,129,1.881]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.505,4,0.441,5,0.441,7,0.505,8,0.037,12,0.505,13,0.086,16,0.028,17,0.028,45,0.802,48,1.396,51,1.696,79,1.396,102,1.606,103,3.607,104,2.068,106,2.066,117,2.066,129,2.868,135,3.607,201,3.348,203,3.262,207,1.78,228,3.607,230,3.607,237,2.945,238,3.567,239,3.567,240,3.567]],["title/classes/CreateUserDto.html",[13,0.057,241,1.675]],["body/classes/CreateUserDto.html",[3,0.373,4,0.326,5,0.326,7,0.373,8,0.036,12,0.373,13,0.07,16,0.023,17,0.023,45,0.593,48,1.439,51,2.015,79,1.439,84,4.125,87,3.09,102,1.187,106,1.684,117,2.13,169,2.176,171,2.176,173,3.088,174,3.088,175,3.088,201,2.956,202,2.658,203,3.362,205,2.176,207,1.316,241,2.08,242,4.125,243,1.873,244,3.589,245,4.348,246,2.637,247,2.637,248,2.637,249,2.637,250,2.637,251,2.637,252,2.637,253,4.733,254,3.741,255,3.741,256,3.741,257,3.741,258,3.741,259,5.191,260,3.741,261,2.08,262,3.741,263,3.741,264,2.637,265,3.741,266,3.741,267,3.741,268,2.637,269,2.637,270,2.637]],["title/classes/GetUsersParamDto.html",[13,0.057,271,1.675]],["body/classes/GetUsersParamDto.html",[3,0.477,4,0.416,5,0.416,7,0.699,8,0.037,12,0.477,13,0.093,16,0.027,17,0.027,45,0.757,48,1.024,79,1.501,80,1.99,85,3.401,93,2.762,102,1.515,106,1.99,117,1.515,118,2.779,119,2.762,134,1.371,202,3.142,207,1.68,213,2.392,215,3.65,216,1.68,261,2.745,271,2.459,272,3.65,273,2.459,274,2.779,275,4.422,276,3.367,277,3.367,278,3.65,279,3.367]],["title/classes/PatchPostDto.html",[13,0.057,280,1.881]],["body/classes/PatchPostDto.html",[3,0.483,4,0.422,5,0.422,7,0.704,8,0.037,12,0.483,13,0.084,16,0.027,17,0.027,45,0.767,48,1.037,79,1.037,85,3.416,101,1.897,102,1.535,104,2.227,105,2.424,106,2.007,117,1.535,134,1.389,143,2.816,201,2.786,207,1.702,211,2.131,214,3.681,216,1.702,261,2.48,278,3.681,280,2.786,281,3.681,282,3.681,283,4.46,284,3.411,285,3.411,286,2.816,287,2.816,288,2.816]],["title/classes/PatchUserDto.html",[13,0.057,289,1.881]],["body/classes/PatchUserDto.html",[3,0.58,4,0.506,5,0.506,7,0.709,8,0.037,12,0.58,13,0.077,16,0.031,17,0.031,102,1.842,211,2.557,241,2.276,243,2.908,282,4.131,287,3.379,289,3.126,290,3.379,291,5.005,292,3.379,293,3.379,294,3.379]],["title/controllers/PostsController.html",[0,1.112,295,1.881]],["body/controllers/PostsController.html",[0,0.724,2,0.724,3,0.277,4,0.242,5,0.242,7,0.626,8,0.037,9,0.488,12,0.277,13,0.037,14,1.089,15,0.882,16,0.018,17,0.018,45,0.441,46,1.499,48,1.111,50,1.823,51,1.35,52,1.823,57,1.392,70,2.855,77,2.032,78,2.032,79,1.523,80,1.645,101,2.914,104,2.295,114,2.135,117,1.645,134,2.04,167,2.559,211,2.559,216,0.978,280,2.912,286,2.48,288,2.48,295,1.877,296,1.617,297,1.959,298,3.004,299,3.004,300,3.004,301,1.959,302,3.004,303,4.097,304,4.097,305,3.004,306,3.382,307,1.959,308,1.959,309,1.959,310,1.959,311,1.959,312,3.004,313,1.959,314,3.004,315,2.48,316,1.959,317,3.382,318,1.959,319,4.097,320,1.959,321,1.959,322,3.654,323,1.617,324,1.617,325,2.48,326,1.823,327,1.617,328,3.004,329,3.016,330,3.016,331,1.617,332,1.617,333,1.617,334,1.959,335,1.959,336,1.959,337,1.959,338,2.48,339,2.48,340,1.959,341,1.959]],["title/modules/PostsModule.html",[18,1.112,31,1.675]],["body/modules/PostsModule.html",[2,1.615,3,0.469,4,0.409,5,0.409,7,0.737,8,0.037,9,0.825,12,0.469,13,0.062,16,0.027,17,0.027,18,1.808,20,1.49,21,1.49,22,1.84,23,1.84,24,1.49,25,2.722,26,1.84,31,3.202,32,2.504,33,2.431,34,1.84,35,1.651,37,2.731,68,2.732,295,3.058,326,2.775,327,2.732,342,2.732,343,3.309,344,2.732,345,3.309,346,3.309]],["title/injectables/PostsService.html",[42,1.112,326,1.503]],["body/injectables/PostsService.html",[3,0.424,4,0.37,5,0.37,7,0.578,8,0.038,9,0.746,12,0.424,13,0.056,14,1.663,15,1.346,16,0.025,17,0.025,42,1.509,43,1.663,45,0.673,46,2.038,48,1.242,50,1.493,51,1.718,52,1.493,70,2.587,73,2.125,74,2.469,75,2.2,77,2.271,78,2.271,79,1.242,80,1.839,89,2.469,93,3.122,96,2.125,104,1.664,107,4.126,116,3.372,273,1.663,315,2.469,326,2.038,347,2.469,348,3.372,349,2.991,350,4.085,351,2.991,352,2.469,353,2.991,354,2.991,355,2.991,356,3.372,357,4.085]],["title/controllers/UsersController.html",[0,1.112,358,1.881]],["body/controllers/UsersController.html",[0,0.651,2,0.651,3,0.25,4,0.218,5,0.218,7,0.632,8,0.037,9,0.44,12,0.25,13,0.033,14,0.981,15,0.794,16,0.017,17,0.017,45,0.397,46,1.382,48,1.039,50,1.706,51,0.651,52,2.1,57,1.253,70,2.766,75,1.392,77,1.901,78,2.34,79,1.42,80,1.539,104,1.577,114,1.253,117,1.539,119,2.419,132,3.197,133,3.197,134,1.819,144,3.021,154,1.456,167,1.73,216,0.88,235,2.286,241,2.597,261,3.01,271,2.153,273,2.597,289,3.021,294,2.286,306,2.286,317,2.286,323,1.456,324,2.286,325,2.822,329,2.286,330,2.286,331,1.456,332,1.456,333,1.456,338,1.456,339,1.456,356,2.286,358,1.73,359,1.456,360,2.769,361,3.419,362,2.769,363,1.764,364,1.764,365,1.764,366,3.686,367,1.764,368,2.769,369,2.769,370,2.769,371,1.764,372,2.769,373,2.286,374,1.764,375,2.769,376,2.769,377,2.769,378,3.873,379,1.764,380,2.769,381,2.769,382,1.764,383,2.286,384,1.764,385,1.764,386,3.419,387,1.764,388,1.456,389,1.456,390,1.456,391,3.419,392,1.764,393,1.764,394,1.764,395,1.456,396,1.764,397,1.764,398,1.764,399,1.764,400,1.764,401,1.764,402,1.764,403,1.764,404,1.764,405,1.764,406,1.764,407,1.764]],["title/modules/UsersModule.html",[18,1.112,32,1.356]],["body/modules/UsersModule.html",[2,1.592,3,0.459,4,0.401,5,0.401,7,0.731,8,0.037,9,0.808,12,0.459,13,0.061,16,0.027,17,0.027,18,1.789,20,1.459,21,1.459,22,1.802,23,1.802,24,1.459,25,2.694,26,2.694,30,2.151,32,2.54,33,2.397,34,1.802,35,1.617,37,2.024,66,2.693,75,2.423,358,3.026,390,2.675,408,2.675,409,2.675,410,2.675,411,3.241,412,3.241,413,3.241]],["title/injectables/UsersService.html",[42,1.112,75,1.227]],["body/injectables/UsersService.html",[3,0.324,4,0.283,5,0.283,7,0.568,8,0.038,9,0.57,12,0.324,13,0.075,15,1.03,16,0.021,17,0.021,42,1.247,43,1.272,45,0.514,46,1.685,48,1.22,50,1.685,51,1.745,52,1.685,59,2.362,66,1.429,70,2.749,71,1.888,73,2.399,75,1.375,77,2.231,78,2.231,79,1.22,80,1.806,85,1.429,87,3.147,88,1.888,90,1.888,91,1.888,93,1.429,96,1.625,134,1.375,144,2.506,244,3.656,261,2.749,271,2.463,273,2.231,348,3.312,352,1.888,366,3.312,383,2.787,388,1.888,389,1.888,414,1.888,415,3.376,416,2.787,417,3.376,418,3.376,419,4.012,420,3.376,421,2.288,422,2.288,423,2.288,424,2.288,425,3.376,426,2.288,427,2.288,428,2.288,429,2.288,430,2.288,431,2.288,432,2.288,433,2.288,434,2.288,435,2.288,436,2.288,437,2.288,438,2.288,439,2.288]],["title/coverage.html",[440,2.916]],["body/coverage.html",[0,1.808,1,1.78,5,0.352,6,2.352,8,0.037,10,1.422,13,0.1,16,0.024,17,0.024,24,1.282,42,1.808,44,2.352,55,1.78,56,2.352,59,1.282,69,2.352,75,1.16,79,0.866,101,1.584,103,2.807,104,1.847,105,2.807,129,1.78,135,2.024,167,1.78,232,2.352,237,2.352,241,1.584,242,2.352,243,2.807,271,1.584,272,2.352,273,1.584,274,2.352,280,1.78,281,2.352,289,1.78,290,2.352,295,1.78,296,2.352,326,1.422,347,2.352,358,1.78,359,2.352,414,2.352,416,2.352,440,2.024,441,2.352,442,2.849,443,4.845,444,4.896,445,4.534,446,3.95,447,2.352,448,2.849,449,2.849,450,3.95,451,3.95,452,3.95,453,2.849,454,2.849]],["title/dependencies.html",[21,1.63,455,2.079]],["body/dependencies.html",[8,0.038,9,0.955,13,0.09,16,0.03,17,0.03,21,1.724,150,3.162,207,1.912,213,2.722,216,1.912,292,3.162,293,3.162,456,3.831,457,3.831,458,5.248,459,3.831,460,3.831,461,3.831,462,3.831,463,3.831,464,3.831,465,3.831,466,3.831,467,3.831,468,3.831,469,3.831,470,3.831,471,3.831,472,3.831]],["title/miscellaneous/enumerations.html",[473,1.573,474,2.989]],["body/miscellaneous/enumerations.html",[8,0.037,16,0.029,17,0.029,45,0.833,104,1.915,142,3.881,144,2.937,145,3.881,146,3.881,152,3.881,182,3.881,183,3.881,184,3.881,185,3.881,230,4.188,473,2.313,474,3.057,475,4.702,476,4.702,477,4.702,478,4.702]],["title/miscellaneous/functions.html",[473,1.573,479,2.989]],["body/miscellaneous/functions.html",[8,0.033,16,0.033,17,0.033,24,2.545,45,1.022,447,3.754,473,2.841,479,3.754,480,4.548]],["title/index.html",[45,0.677,481,3.012]],["body/index.html",[4,0.239,8,0.035,16,0.018,17,0.018,35,2.313,54,2.988,92,3.826,119,2.539,120,2.452,134,0.786,168,4.114,227,1.593,228,1.371,373,1.593,395,3.826,440,1.371,441,2.452,482,1.93,483,1.93,484,3.62,485,2.97,486,1.93,487,1.93,488,1.93,489,1.93,490,2.97,491,1.93,492,1.93,493,4.065,494,1.93,495,4.984,496,1.93,497,4.828,498,1.93,499,1.93,500,1.93,501,2.97,502,1.93,503,2.97,504,1.93,505,3.62,506,1.93,507,1.93,508,1.93,509,1.93,510,1.93,511,1.93,512,4.065,513,2.97,514,1.93,515,1.93,516,1.93,517,1.93,518,1.93,519,2.97,520,4.065,521,1.93,522,2.97,523,1.93,524,2.97,525,4.388,526,4.065,527,1.93,528,2.97,529,1.93,530,1.93,531,1.93,532,1.93,533,4.065,534,1.93,535,1.93,536,1.93,537,1.93,538,1.93,539,2.97,540,1.93,541,1.93,542,1.93,543,1.93,544,1.93,545,2.97,546,1.93,547,1.93,548,1.93,549,2.97,550,1.93,551,1.93,552,3.355,553,2.97,554,1.93,555,1.93,556,1.93,557,1.93,558,1.93,559,1.93,560,1.93,561,1.93,562,2.97,563,1.93,564,1.93,565,1.93,566,1.93,567,3.62,568,1.93,569,1.93,570,1.93,571,1.93,572,1.93,573,1.93,574,2.97,575,1.93,576,1.93,577,1.93,578,1.93,579,1.93,580,2.97,581,1.93,582,1.93,583,1.93,584,2.97,585,2.97,586,1.93,587,1.93,588,1.93,589,1.93,590,1.93,591,1.93,592,1.93,593,1.93,594,1.93,595,1.93,596,1.93,597,1.593,598,1.93,599,1.93,600,1.93,601,1.93,602,1.93,603,1.93,604,1.593]],["title/modules.html",[20,1.847]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.64,20,1.902,30,2.109,31,2.35,32,1.902,552,4.7,605,5.694,606,5.694,607,5.694]],["title/overview.html",[608,3.388]],["body/overview.html",[2,1.126,8,0.036,10,2.345,16,0.025,17,0.025,18,1.126,19,3.62,20,1.373,21,1.373,22,1.696,23,1.696,24,1.373,25,1.696,26,1.696,27,2.518,28,2.518,29,2.518,30,2.711,31,3.09,32,2.501,33,2.302,34,1.696,35,1.522,43,1.696,59,2.501,62,2.518,63,2.518,64,2.518,75,2.263,102,1.373,194,3.879,326,2.345,342,2.518,344,2.518,408,2.518,409,2.518,410,2.518,443,2.518,608,2.518,609,3.05]],["title/properties.html",[106,1.63,455,2.079]],["body/properties.html",[8,0.037,16,0.032,17,0.032,106,2.012,134,1.82,597,3.689,604,3.689,610,4.469,611,4.469,612,4.469]],["title/routes.html",[613,3.388]],["body/routes.html",[8,0.034,16,0.034,17,0.034,613,3.914]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":443,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["0.0.1",{"_index":611,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["03t11:45:36.124z",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["03t11:45:36.124z'})@isdatestring()@isoptional",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.30",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["10})@apiquery({name",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":279,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.1.0",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["200",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["2025",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255})@isstring()@isnotempty()@minlength(3)@maxlength(255)@matches(/^[a",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255})@isstring()@isnotempty()@minlength(4)@maxlength(255",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4.1.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":609,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["alice",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":540,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":590,"title":{},"body":{"index.html":{}}}],["api",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["apioperation",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiresponse({status",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":490,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":597,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":528,"title":{},"body":{"index.html":{}}}],["backers",{"_index":591,"title":{},"body":{"index.html":{}}}],["based",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":583,"title":{},"body":{"index.html":{}}}],["body",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":607,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":605,"title":{},"body":{"modules.html":{}}}],["building",{"_index":485,"title":{},"body":{"index.html":{}}}],["business",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":555,"title":{},"body":{"index.html":{}}}],["character",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":539,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":523,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":342,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":343,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":344,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":546,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["conneffffffct",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createuserdto",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(getuserparamdto",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(isauth",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchuserdto",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(user",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional()@minlength(3)@maxlength(255",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":561,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":440,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":101,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostdto})@apioperation({summary",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptionsdto",{"_index":129,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":241,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["db",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":557,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":512,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":527,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":519,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":538,"title":{},"body":{"index.html":{}}}],["description",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":498,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":569,"title":{},"body":{"index.html":{}}}],["discord",{"_index":554,"title":{},"body":{"index.html":{}}}],["dive",{"_index":556,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":441,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":286,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["dto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:102",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:11",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dto.ts:113",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:147",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:32",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:41",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:57",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:67",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:77",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:86",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:94",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":507,"title":{},"body":{"index.html":{}}}],["each",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":486,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":517,"title":{},"body":{"index.html":{}}}],["email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["endpoint.'})@apibody({type",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["endpoint.'})@patch",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["ensure",{"_index":515,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":573,"title":{},"body":{"index.html":{}}}],["entries",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":474,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exists",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":559,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":531,"title":{},"body":{"index.html":{}}}],["featured",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":542,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":533,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["fns",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":541,"title":{},"body":{"index.html":{}}}],["follow",{"_index":577,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":484,"title":{},"body":{"index.html":{}}}],["full",{"_index":572,"title":{},"body":{"index.html":{}}}],["function",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":479,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":536,"title":{},"body":{"index.html":{}}}],["get('{/:id",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:id}')@apioperation({summary",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:userid",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["getuserparamdto",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":271,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":564,"title":{},"body":{"index.html":{}}}],["grow",{"_index":587,"title":{},"body":{"index.html":{}}}],["handles",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":558,"title":{},"body":{"index.html":{}}}],["handy",{"_index":547,"title":{},"body":{"index.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":562,"title":{},"body":{"index.html":{}}}],["here",{"_index":595,"title":{},"body":{"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":601,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":521,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":544,"title":{},"body":{"index.html":{}}}],["inject",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":535,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":496,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["integrates",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["interact",{"_index":565,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdatestring",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatusenum",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypeenum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isjson",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":238,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(96",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(256)@matches(/^(?=.*[a",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(2)@maxlength(96",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane@doe.com",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":580,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":582,"title":{},"body":{"index.html":{}}}],["john",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":593,"title":{},"body":{"index.html":{}}}],["json",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":598,"title":{},"body":{"index.html":{}}}],["key",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":550,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":604,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":585,"title":{},"body":{"index.html":{}}}],["limit",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":579,"title":{},"body":{"index.html":{}}}],["list",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost:3000/posts/:userid",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":522,"title":{},"body":{"index.html":{}}}],["loop",{"_index":575,"title":{},"body":{"index.html":{}}}],["makes",{"_index":529,"title":{},"body":{"index.html":{}}}],["managing",{"_index":543,"title":{},"body":{"index.html":{}}}],["matches",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["mau",{"_index":525,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(255",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(256",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(4",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":473,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":584,"title":{},"body":{"index.html":{}}}],["mode",{"_index":501,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":520,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":599,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":570,"title":{},"body":{"index.html":{}}}],["nest",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestframework",{"_index":603,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":292,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":537,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":483,"title":{},"body":{"index.html":{}}}],["npm",{"_index":495,"title":{},"body":{"index.html":{}}}],["number",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":581,"title":{},"body":{"index.html":{}}}],["official",{"_index":526,"title":{},"body":{"index.html":{}}}],["one",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":586,"title":{},"body":{"index.html":{}}}],["operations",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":237,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:5",{"_index":239,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:8",{"_index":240,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":608,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":455,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":274,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":571,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":287,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":283,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":291,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchedpostdto",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":280,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostdto})@apioperation({summary",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":289,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"}'})@isoptional()@isjson",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["platform",{"_index":524,"title":{},"body":{"index.html":{}}}],["please",{"_index":553,"title":{},"body":{"index.html":{}}}],["position",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":518,"title":{},"body":{"index.html":{}}}],["post",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post's",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":295,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":326,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatusenum",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatusenum})@isenum(poststatusenum)@isnotempty",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttypeenum",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttypeenum})@isenum(posttypeenum)@isnotempty",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":503,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":482,"title":{},"body":{"index.html":{}}}],["project",{"_index":493,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.'})@apiquery({name",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":551,"title":{},"body":{"index.html":{}}}],["read",{"_index":594,"title":{},"body":{"index.html":{}}}],["readme",{"_index":481,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":511,"title":{},"body":{"index.html":{}}}],["real",{"_index":566,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":492,"title":{},"body":{"index.html":{}}}],["request",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":532,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":545,"title":{},"body":{"index.html":{}}}],["response",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":613,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":497,"title":{},"body":{"index.html":{}}}],["runs",{"_index":516,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":487,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":488,"title":{},"body":{"index.html":{}}}],["service",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":494,"title":{},"body":{"index.html":{}}}],["side",{"_index":489,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":534,"title":{},"body":{"index.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":275,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":589,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":413,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":447,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":272,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":290,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:11",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:17",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:39",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":499,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":502,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":504,"title":{},"body":{"index.html":{}}}],["starter",{"_index":491,"title":{},"body":{"index.html":{}}}],["statements",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status.enum.ts",{"_index":476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":574,"title":{},"body":{"index.html":{}}}],["steps",{"_index":513,"title":{},"body":{"index.html":{}}}],["store",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["story",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":530,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":552,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":606,"title":{},"body":{"modules.html":{}}}],["table",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":514,"title":{},"body":{"index.html":{}}}],["test",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["test:covdeployment",{"_index":509,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":508,"title":{},"body":{"index.html":{}}}],["testkey",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tests",{"_index":505,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":588,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":567,"title":{},"body":{"index.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":596,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@maxlength(255",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":602,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type.enum.ts",{"_index":477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":293,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isoptional()@isstring({each",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":506,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":612,"title":{},"body":{"properties.html":{}}}],["update",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":288,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated.'})@isint()@isnotempty",{"_index":284,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchedpostdto",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":576,"title":{},"body":{"index.html":{}}}],["url",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":294,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":273,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":412,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":358,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":75,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":568,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":610,"title":{},"body":{"properties.html":{}}}],["video",{"_index":560,"title":{},"body":{"index.html":{}}}],["visit",{"_index":549,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":563,"title":{},"body":{"index.html":{}}}],["want",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":500,"title":{},"body":{"index.html":{}}}],["website",{"_index":600,"title":{},"body":{"index.html":{}}}],["what's",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["without",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":548,"title":{},"body":{"index.html":{}}}],["x",{"_index":578,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":592,"title":{},"body":{"index.html":{}}}],["you're",{"_index":510,"title":{},"body":{"index.html":{}}}],["z0",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[^a",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Nest!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    // check user exists in db\n    const user = this.usersService.findOneById('1234');\n\n    // login\n    // token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'This is the test post's content'})@IsString()@IsOptional()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The featured image URL of the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, description: 'The meta options of the post', example: undefined, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the post. Can be post, page, story, or series.', example: 'post', enum: PostTypeEnum})@IsEnum(PostTypeEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post was published', example: '2025-10-03T11:45:36.124Z'})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', example: 'new-with-nestjs', minLength: 3, maxLength: 255})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and use only \"-\" and without spaces. For example \"my-url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The status of the post. Can be draft, scheduled, review, or published.', example: 'draft', enum: PostStatusEnum})@IsEnum(PostStatusEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The tags of the post', example: undefined})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})@MaxLength(255, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', example: 'What's new with NestJS?', minLength: 4, maxLength: 255})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostTypeEnum } from '../enums/post-type.enum';\nimport { PostStatusEnum } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    example: \"What's new with NestJS?\",\n    minLength: 4,\n    maxLength: 255,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(255)\n  title: string;\n\n  @ApiProperty({\n    description: 'The type of the post. Can be post, page, story, or series.',\n    example: 'post',\n    enum: PostTypeEnum,\n  })\n  @IsEnum(PostTypeEnum)\n  @IsNotEmpty()\n  postType: PostTypeEnum;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    example: 'new-with-nestjs',\n    minLength: 3,\n    maxLength: 255,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and use only \"-\" and without spaces. For example \"my-url',\n  })\n  slug: string;\n\n  @ApiProperty({\n    description:\n      'The status of the post. Can be draft, scheduled, review, or published.',\n    example: 'draft',\n    enum: PostStatusEnum,\n  })\n  @IsEnum(PostStatusEnum)\n  @IsNotEmpty()\n  status: PostStatusEnum;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: \"This is the test post's content\",\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(255)\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'The featured image URL of the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post was published',\n    example: '2025-10-03T11:45:36.124Z',\n  })\n  @IsDateString()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'The tags of the post',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  @MaxLength(255, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    description: 'The meta options of the post',\n    example: [\n      {\n        key: 'testKey',\n        value: 20,\n      },\n    ],\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description:\n            'The value can be any value you want to store for your meta option',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(256)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).+$/, {message: 'Minimum 8 characters password, it must contain at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(2)\n  @MaxLength(96)\n  lastName: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(256)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).+$/, {\n    message:\n      'Minimum 8 characters password, it must contain at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to be updated.'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post-dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post to be updated.',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'You get a 201 response if your post created successfully.', type: CreatePostDto})@ApiOperation({summary: 'Create a new post', description: 'You can create a new post with this endpoint.'})@ApiBody({type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:userId}')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        GET localhost:3000/posts/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchedPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'You get a 200 response if your post updated successfully.', type: PatchPostDto})@ApiOperation({summary: 'Update a post', description: 'You can update a post with this endpoint.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchedPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchPostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post-dto';\nimport { PatchPostDto } from './dtos/patch-post-dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('{/:userId}')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post created successfully.',\n    type: CreatePostDto,\n  })\n  @ApiOperation({\n    summary: 'Create a new post',\n    description: 'You can create a new post with this endpoint.',\n  })\n  @ApiBody({\n    type: CreatePostDto,\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return createPostDto;\n  }\n\n  @ApiResponse({\n    status: 200,\n    description: 'You get a 200 response if your post updated successfully.',\n    type: PatchPostDto,\n  })\n  @ApiOperation({\n    summary: 'Update a post',\n    description: 'You can update a post with this endpoint.',\n  })\n  @Patch()\n  public updatePost(@Body() patchedPostDto: PatchPostDto) {\n    return patchedPostDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    // Users Service\n    // Find a User\n\n    const user = this.usersService.findOneById(userId);\n\n    console.log(user);\n\n    return [\n      { user, title: 'Post 1', content: 'Content 1' },\n      { user, title: 'Post 2', content: 'Content 2' },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:id}')@ApiOperation({summary: 'Fetches a list of registered users of the application.'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query.'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number you want to API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('{/:id}')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users of the application.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query.',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page number you want to API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    console.log(patchUserDto);\n\n    return patchUserDto;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to conneffffffct to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to conneffffffct to Users table and perform business operations\n *\n * @description This service handles user-related operations and integrates with AuthService.\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    console.log(getUserParamDto);\n    const isAuth = this.authService.isAuth();\n\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Jane',\n        email: 'jane@doe.com',\n      },\n    ];\n  }\n\n  public findOneById(id: string) {\n    return {\n      firstName: 'Alice',\n      email: 'alice@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/posts/dtos/create-post-dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/posts/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.30\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            date-fns : ^4.1.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatusEnum   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostTypeEnum   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatusEnum\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostTypeEnum\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
