var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.147,1,1.915]],["body/controllers/AppController.html",[0,1.929,1,3.221,2,1.589,3,0.565,4,0.494,5,0.494,6,3.49,7,0.686,8,0.036,9,1.089,10,2.784,11,3.49,12,0.565,13,0.076,14,2.367,15,1.926,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.147,19,1.915]],["body/modules/AppModule.html",[1,2.805,2,1.451,3,0.366,4,0.32,5,0.32,7,0.744,8,0.037,9,0.706,10,2.673,11,2.262,12,0.366,13,0.049,16,0.023,17,0.023,18,1.68,19,3.675,20,1.248,21,1.132,22,1.534,23,1.534,24,1.248,25,2.503,26,1.534,27,2.262,28,2.262,29,2.262,30,2.673,31,2.972,32,2.418,33,2.162,34,1.534,35,1.38,36,2.733,37,2.805,38,2.733,39,2.733,40,2.733,41,2.733,42,2.262,43,1.719,44,1.451,45,2.733,46,2.733,47,1.951,48,2.733,49,0.706,50,3.851,51,2.733,52,2.733,53,2.733,54,2.733,55,2.733,56,1.719,57,2.733,58,2.733,59,1.951,60,2.262,61,1.951,62,2.423,63,2.262,64,2.733]],["title/injectables/AppService.html",[10,1.537,65,1.147]],["body/injectables/AppService.html",[3,0.544,4,0.476,5,0.476,7,0.544,8,0.036,9,1.048,10,2.527,12,0.544,13,0.073,16,0.029,17,0.029,65,1.885,66,2.28,67,3.361,68,0.859,69,2.527,70,5.661,71,1.154,72,4.061,73,2.051,74,1.885,75,2.051,76,4.061,77,3.361]],["title/controllers/AuthController.html",[0,1.147,78,1.915]],["body/controllers/AuthController.html",[0,1.574,2,1.574,3,0.56,4,0.489,5,0.489,7,0.682,8,0.036,9,1.078,12,0.56,13,0.075,14,2.345,15,1.907,16,0.03,17,0.03,78,3.203,79,3.457,80,2.982,81,4.177,82,2.507,83,3.457,84,4.177]],["title/modules/AuthModule.html",[18,1.147,30,1.537]],["body/modules/AuthModule.html",[2,1.684,3,0.456,4,0.398,5,0.398,7,0.71,8,0.036,9,0.878,12,0.456,13,0.061,16,0.026,17,0.026,18,1.881,20,1.553,21,1.409,22,1.909,23,1.909,24,1.553,25,2.802,26,2.802,30,2.909,32,2.04,33,2.508,34,1.909,35,1.717,37,2.139,78,3.14,82,2.764,83,2.814,85,2.814,86,2.814,87,2.814,88,3.4,89,2.811,90,3.4,91,2.814]],["title/injectables/AuthService.html",[65,1.147,82,1.39]],["body/injectables/AuthService.html",[3,0.397,4,0.347,5,0.347,7,0.546,8,0.036,9,0.765,12,0.397,13,0.053,15,1.353,16,0.024,17,0.024,44,1.535,47,2.116,49,1.052,56,2.929,62,1.865,65,1.535,66,1.664,68,0.627,69,2.057,71,1.323,73,2.057,74,2.192,75,2.057,82,1.86,89,1.865,92,2.453,93,3.049,94,4.149,95,4.656,96,2.909,97,2.453,98,2.305,99,2.964,100,2.287,101,2.057,102,1.86,103,2.964,104,2.964,105,4.075,106,2.929,107,2.964,108,1.865,109,2.453,110,2.453,111,2.453,112,2.116,113,2.453,114,2.964,115,2.116,116,2.964,117,2.964,118,2.964]],["title/classes/CreatePostDto.html",[13,0.055,119,1.709]],["body/classes/CreatePostDto.html",[3,0.163,4,0.142,5,0.142,7,0.506,8,0.036,12,0.163,13,0.048,16,0.012,17,0.012,49,1.381,59,2.485,60,1.695,62,2.374,68,0.257,71,1.289,74,1.872,102,2.072,119,1.15,120,0.555,121,3.331,122,2.393,123,0.868,124,1.1,125,3.122,126,2.655,127,2.655,128,2.655,129,2.655,130,2.655,131,4.015,132,2.485,133,3.48,134,2.88,135,1.88,136,2.88,137,3.469,138,1.695,139,2.049,140,1.215,141,1.215,142,2.049,143,2.049,144,3.117,145,1.215,146,1.215,147,1.961,148,1.215,149,2.049,150,1.463,151,1.463,152,2.022,153,2.485,154,2.049,155,1.215,156,2.049,157,1.215,158,1.215,159,1.215,160,2.58,161,2.58,162,1.289,163,1.695,164,1.695,165,3.117,166,1.215,167,1.215,168,2.58,169,2.58,170,2.049,171,1.695,172,1.215,173,1.215,174,2.049,175,2.049,176,2.197,177,2.049,178,2.049,179,2.049,180,2.049,181,2.049,182,1.215,183,1.215,184,1.75,185,2.88,186,2.049,187,2.88,188,1.215,189,2.58,190,2.58,191,1.695,192,2.049,193,2.049,194,2.049,195,2.049,196,2.049,197,1.215,198,2.58,199,2.58,200,1.695,201,1.695,202,1.215,203,1.215,204,1.215,205,1.215,206,3.773,207,1.215,208,1.215,209,2.049,210,1.695,211,1.215,212,1.215,213,2.655,214,2.049,215,1.215,216,2.049,217,2.189,218,2.866,219,2.485,220,2.049,221,1.006,222,2.049,223,0.614,224,2.049,225,1.215,226,1.215,227,0.682,228,1.215,229,0.868,230,2.88,231,3.322,232,0.614,233,2.049,234,1.215,235,3.117,236,1.215,237,2.655,238,1.215,239,1.215,240,1.215,241,1.215,242,1.215,243,1.006,244,1.896,245,1.215,246,2.225,247,1.215,248,0.868,249,2.049,250,1.215,251,1.006,252,1.215]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.055,147,1.915]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.498,4,0.435,5,0.435,7,0.498,8,0.036,12,0.498,13,0.085,16,0.028,17,0.028,49,1.222,68,0.786,71,1.345,74,1.784,120,1.697,121,3.719,122,2.158,124,1.961,135,1.961,147,2.978,153,3.719,217,3.45,219,3.38,223,1.877,244,3.719,246,3.719,253,3.076,254,3.717,255,3.717,256,3.717]],["title/classes/CreateUserDto.html",[13,0.055,257,1.537]],["body/classes/CreateUserDto.html",[3,0.374,4,0.327,5,0.327,7,0.374,8,0.035,12,0.374,13,0.07,16,0.023,17,0.023,49,1.262,56,3.237,68,0.591,71,1.389,74,2.105,108,2.839,120,1.276,124,1.621,135,2.025,185,2.312,187,2.312,189,3.237,190,3.237,191,3.237,217,3.075,218,2.792,219,3.49,221,2.312,223,1.411,257,1.975,258,4.258,259,1.995,260,3.222,261,3.734,262,2.794,263,2.794,264,2.794,265,2.794,266,2.794,267,2.794,268,2.794,269,4.888,270,3.911,271,3.911,272,3.911,273,3.911,274,3.911,275,5.332,276,3.911,277,1.975,278,3.911,279,3.911,280,2.794,281,3.911,282,3.911,283,4.888,284,2.794,285,2.794]],["title/classes/GetUsersParamDto.html",[13,0.055,286,1.709]],["body/classes/GetUsersParamDto.html",[3,0.472,4,0.413,5,0.413,7,0.68,8,0.036,12,0.472,13,0.091,16,0.027,17,0.027,44,1.723,49,1.311,68,0.745,71,1.001,102,2.088,106,3.504,120,1.609,124,1.895,135,1.46,136,2.916,137,2.877,152,1.46,218,3.265,223,1.779,229,2.515,231,3.785,232,1.779,277,2.564,286,2.567,287,3.785,288,2.309,289,2.916,290,4.574,291,3.523,292,3.523,293,3.785,294,3.523]],["title/classes/PatchPostDto.html",[13,0.055,295,1.915]],["body/classes/PatchPostDto.html",[3,0.478,4,0.418,5,0.418,7,0.684,8,0.036,12,0.478,13,0.083,16,0.027,17,0.027,49,0.921,68,0.754,71,1.013,106,3.517,119,2.002,120,1.628,122,2.317,123,2.546,124,1.91,135,1.478,152,1.478,161,2.951,217,2.9,223,1.801,227,2.002,230,3.815,232,1.801,277,2.327,293,3.815,295,2.9,296,3.815,297,3.815,298,4.61,299,3.566,300,3.566,301,2.951,302,2.951,303,2.951]],["title/classes/PatchUserDto.html",[13,0.055,304,1.915]],["body/classes/PatchUserDto.html",[3,0.565,4,0.494,5,0.494,7,0.686,8,0.035,12,0.565,13,0.076,16,0.03,17,0.03,120,1.926,227,2.367,257,2.129,259,3.011,297,4.237,302,3.49,304,3.221,305,3.49,306,5.121,307,3.49,308,3.49,309,3.011]],["title/controllers/PostsController.html",[0,1.147,310,1.915]],["body/controllers/PostsController.html",[0,0.797,2,0.797,3,0.283,4,0.248,5,0.248,7,0.616,8,0.036,9,0.546,12,0.283,13,0.038,14,1.187,15,0.965,16,0.019,17,0.019,49,1.335,68,0.447,69,1.612,71,1.093,73,1.942,74,1.449,75,1.942,80,1.509,93,2.97,100,2.159,101,1.942,102,1.756,119,3.027,122,2.389,132,2.279,135,1.594,152,2.142,184,2.406,227,2.406,232,1.068,295,3.043,301,2.642,303,2.642,310,2.008,311,1.75,312,2.114,313,3.193,314,3.193,315,3.193,316,2.114,317,3.193,318,4.285,319,4.285,320,2.642,321,3.546,322,2.114,323,2.114,324,2.114,325,2.114,326,2.114,327,3.193,328,2.114,329,3.193,330,2.642,331,2.114,332,3.546,333,2.114,334,4.285,335,2.114,336,2.114,337,3.847,338,1.75,339,1.509,340,2.642,341,1.942,342,1.75,343,3.193,344,3.183,345,3.183,346,1.75,347,1.509,348,1.75,349,2.114,350,2.114,351,2.114,352,2.114,353,2.642,354,3.193,355,2.114,356,2.114]],["title/modules/PostsModule.html",[18,1.147,31,1.709]],["body/modules/PostsModule.html",[2,1.706,3,0.465,4,0.406,5,0.406,7,0.716,8,0.036,9,0.895,12,0.465,13,0.062,16,0.027,17,0.027,18,1.899,20,1.583,21,1.437,22,1.946,23,1.946,24,1.583,25,2.829,26,1.946,31,3.295,32,2.595,33,2.541,34,1.946,35,1.751,37,2.847,91,2.87,310,3.17,341,2.87,342,2.87,357,2.87,358,3.468,359,2.87,360,3.468,361,3.468]],["title/injectables/PostsService.html",[65,1.147,341,1.537]],["body/injectables/PostsService.html",[3,0.423,4,0.37,5,0.37,7,0.57,8,0.037,9,0.815,12,0.423,13,0.057,14,1.771,15,1.441,16,0.025,17,0.025,44,1.939,49,1.098,65,1.602,66,1.771,68,0.667,69,2.147,71,1.208,73,1.593,74,1.812,75,1.593,93,2.699,96,2.253,97,2.612,98,2.293,100,2.387,101,2.147,102,1.942,109,2.612,115,2.253,122,1.762,125,4.259,134,3.519,288,1.593,330,2.612,341,2.147,362,2.612,363,3.519,364,3.156,365,4.252,366,3.156,367,2.612,368,3.156,369,3.156,370,3.156,371,2.675,372,4.252]],["title/entities/User.html",[44,1.147,373,2.174]],["body/entities/User.html",[3,0.364,4,0.318,5,0.318,7,0.364,8,0.036,12,0.364,13,0.049,16,0.023,17,0.023,44,1.445,49,1.456,56,2.796,61,1.939,62,3.037,68,0.575,71,1.447,74,2.09,101,1.372,106,2.796,108,2.796,124,1.589,135,2.11,151,3.772,260,3.173,261,3.677,277,1.936,288,1.372,373,2.737,374,2.248,375,4.828,376,5.546,377,5.546,378,5.546,379,5.546,380,3.173,381,2.716,382,2.716,383,4.444,384,2.716,385,2.716,386,2.716,387,5.092,388,1.939]],["title/controllers/UsersController.html",[0,1.147,389,1.915]],["body/controllers/UsersController.html",[0,0.733,2,0.733,3,0.261,4,0.228,5,0.228,7,0.627,8,0.036,9,0.502,12,0.261,13,0.035,14,1.092,15,0.888,16,0.018,17,0.018,49,1.259,68,0.411,69,1.513,71,1.038,73,1.845,75,2.238,80,1.389,93,2.9,98,1.514,100,2.051,101,2.238,102,1.669,122,1.514,132,1.389,135,1.514,137,2.582,150,2.931,151,2.931,152,1.94,162,3.169,171,1.61,184,1.682,232,0.982,251,2.48,257,2.364,277,2.817,286,2.304,288,2.364,304,3.169,309,2.139,321,2.48,332,2.48,338,1.61,339,2.139,340,3.024,344,2.48,345,2.48,346,1.61,347,1.389,348,1.61,353,1.61,371,1.885,389,1.885,390,1.61,391,2.996,392,3.654,393,2.996,394,1.946,395,1.946,396,1.946,397,4.683,398,1.946,399,2.996,400,2.48,401,2.996,402,1.946,403,2.996,404,2.139,405,1.946,406,2.996,407,2.996,408,2.48,409,3.397,410,1.946,411,2.996,412,2.996,413,1.946,414,2.48,415,1.946,416,1.946,417,3.654,418,1.946,419,1.61,420,1.61,421,1.61,422,3.654,423,1.946,424,1.946,425,1.946,426,1.61,427,1.946,428,1.946,429,1.946,430,1.946,431,1.946,432,1.946,433,1.946,434,1.946,435,1.946]],["title/modules/UsersModule.html",[18,1.147,32,1.39]],["body/modules/UsersModule.html",[2,1.638,3,0.437,4,0.382,5,0.382,7,0.749,8,0.036,9,0.842,12,0.437,13,0.058,16,0.026,17,0.026,18,1.842,20,1.489,21,1.351,22,1.831,23,1.831,24,1.489,25,2.745,26,2.745,30,2.195,32,2.604,33,2.44,34,1.831,35,1.647,37,2.052,42,2.699,43,2.052,44,1.229,89,2.735,98,2.493,389,3.076,421,2.699,436,2.699,437,2.699,438,2.699,439,3.261,440,3.261,441,3.261,442,2.699,443,3.261]],["title/injectables/UsersService.html",[65,1.147,98,1.262]],["body/injectables/UsersService.html",[3,0.194,4,0.353,5,0.17,7,0.582,8,0.037,9,0.374,12,0.194,13,0.026,15,1.083,16,0.014,17,0.02,21,0.983,43,0.912,44,2.056,47,2.149,49,0.898,65,0.894,66,0.814,68,0.307,69,1.198,71,0.988,73,2.08,74,1.445,75,1.937,82,2.305,89,0.912,93,2.635,94,1.2,96,1.694,98,0.983,100,2.312,101,1.756,102,1.588,108,2.413,110,1.2,111,1.963,112,1.035,113,1.2,115,1.694,150,1.694,152,1.707,162,2.188,176,1.963,184,1.69,227,2.153,248,2.483,257,2.08,260,2.483,277,2.438,286,1.953,288,2.37,309,1.035,320,1.963,339,2.94,347,1.035,363,2.492,367,2.879,371,1.493,380,2.879,388,1.035,400,2.879,404,1.694,408,1.963,409,1.963,414,2.492,419,1.2,420,1.2,442,1.2,444,1.2,445,2.373,446,3.479,447,2.373,448,2.373,449,3.011,450,3.011,451,2.373,452,2.373,453,1.45,454,2.879,455,1.45,456,2.373,457,2.373,458,2.373,459,2.373,460,2.373,461,2.373,462,1.45,463,1.45,464,1.45,465,3.479,466,3.479,467,1.45,468,4.119,469,2.373,470,2.373,471,3.479,472,2.373,473,2.373,474,3.479,475,2.373,476,2.373,477,1.45,478,2.373,479,2.373,480,2.373,481,1.45,482,1.45,483,1.45,484,1.45,485,1.45,486,1.45,487,1.45,488,1.45,489,1.45,490,2.373,491,1.45,492,1.45,493,1.45,494,1.45,495,1.45,496,1.45,497,3.011,498,1.45,499,1.45,500,1.45,501,1.45,502,1.45,503,1.45,504,1.45,505,1.45,506,1.45,507,1.45,508,1.45]],["title/coverage.html",[509,2.963]],["body/coverage.html",[0,1.887,1,1.858,5,0.346,6,2.445,8,0.036,10,1.492,13,0.097,16,0.024,17,0.024,24,1.349,44,1.113,49,0.763,65,1.887,67,2.445,78,1.858,79,2.445,82,1.349,92,2.445,98,1.224,119,1.658,121,2.902,122,1.926,123,2.902,147,1.858,153,2.109,184,1.658,248,2.109,253,2.445,257,1.492,258,2.445,259,2.902,286,1.658,287,2.445,288,1.492,289,2.445,295,1.858,296,2.445,304,1.858,305,2.445,310,1.858,311,2.445,341,1.492,362,2.445,373,2.109,374,2.445,389,1.858,390,2.445,444,2.445,509,2.109,510,2.445,511,2.954,512,4.965,513,5.25,514,4.648,515,4.065,516,2.445,517,2.954,518,2.954,519,4.065,520,2.954,521,2.954,522,2.954,523,2.954,524,2.954,525,2.954,526,2.954]],["title/dependencies.html",[21,1.517,527,2.106]],["body/dependencies.html",[8,0.037,9,0.985,13,0.086,16,0.028,17,0.028,21,1.58,43,2.399,168,3.156,223,1.926,229,2.723,232,1.926,307,3.156,308,3.156,388,2.723,528,3.814,529,3.814,530,5.271,531,3.814,532,3.814,533,3.814,534,3.814,535,3.814,536,3.814,537,3.814,538,3.814,539,3.814,540,3.814,541,3.814,542,3.814,543,3.814,544,3.814,545,3.814,546,3.814,547,3.814,548,3.814]],["title/miscellaneous/enumerations.html",[549,1.601,550,3.029]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.028,17,0.028,68,0.814,122,2.005,160,4.004,162,3.044,163,4.004,164,4.004,169,4.004,198,4.004,199,4.004,200,4.004,201,4.004,246,4.281,549,2.42,550,3.184,551,4.838,552,4.838,553,4.838,554,4.838]],["title/miscellaneous/functions.html",[549,1.601,555,3.029]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.622,68,0.982,516,3.841,549,2.92,555,3.841,556,4.641]],["title/index.html",[68,0.644,557,3.045]],["body/index.html",[4,0.244,8,0.034,16,0.019,17,0.019,35,2.429,59,3.675,63,1.725,77,3.155,112,3.435,137,2.676,138,2.613,152,0.864,243,1.725,244,1.488,404,1.488,426,3.981,454,1.725,509,1.488,510,2.613,558,2.084,559,2.084,560,3.813,561,3.158,562,2.084,563,2.084,564,2.084,565,2.084,566,3.158,567,2.084,568,4.254,569,2.084,570,5.148,571,2.084,572,4.998,573,2.084,574,2.084,575,3.158,576,2.084,577,3.158,578,2.084,579,3.813,580,2.084,581,2.084,582,2.084,583,2.084,584,2.084,585,2.084,586,4.254,587,3.158,588,2.084,589,2.084,590,2.084,591,2.084,592,2.084,593,3.158,594,4.254,595,2.084,596,3.158,597,2.084,598,3.158,599,4.572,600,4.254,601,2.084,602,3.158,603,2.084,604,2.084,605,2.084,606,2.084,607,4.254,608,2.084,609,2.084,610,2.084,611,2.084,612,2.084,613,3.158,614,2.084,615,2.084,616,2.084,617,2.084,618,2.084,619,3.158,620,2.084,621,2.084,622,2.084,623,3.158,624,2.084,625,2.084,626,3.521,627,3.158,628,2.084,629,2.084,630,2.084,631,2.084,632,2.084,633,2.084,634,2.084,635,2.084,636,3.158,637,2.084,638,2.084,639,2.084,640,2.084,641,3.813,642,2.084,643,2.084,644,2.084,645,2.084,646,2.084,647,2.084,648,3.158,649,2.084,650,2.084,651,2.084,652,2.084,653,2.084,654,3.158,655,2.084,656,2.084,657,2.084,658,3.158,659,3.158,660,2.084,661,2.084,662,2.084,663,2.084,664,2.084,665,2.084,666,2.084,667,2.084,668,2.084,669,2.084,670,2.084,671,1.725,672,2.084,673,2.084,674,2.084,675,2.084,676,2.084,677,2.084,678,1.725]],["title/modules.html",[20,1.895]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.732,20,1.983,30,2.193,31,2.438,32,1.983,626,4.793,679,5.791,680,5.791,681,5.791]],["title/overview.html",[682,3.435]],["body/overview.html",[2,1.202,8,0.035,10,2.442,16,0.025,17,0.025,18,1.202,19,3.712,20,1.457,21,1.322,22,1.791,23,1.791,24,1.457,25,1.791,26,1.791,27,2.64,28,2.64,29,2.64,30,2.803,31,3.183,32,2.59,33,2.404,34,1.791,35,1.611,61,2.278,66,1.791,82,2.59,85,2.64,86,2.64,87,2.64,98,2.35,120,1.457,210,4.002,341,2.442,357,2.64,359,2.64,371,2.007,436,2.64,437,2.64,438,2.64,512,2.64,682,2.64,683,3.19]],["title/properties.html",[124,1.517,527,2.106]],["body/properties.html",[8,0.036,16,0.032,17,0.032,124,1.893,152,1.893,671,3.781,678,3.781,684,4.569,685,4.569,686,4.569]],["title/routes.html",[687,3.435]],["body/routes.html",[8,0.033,16,0.033,17,0.033,687,3.988]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":512,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["0.0.1",{"_index":685,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["03t11:45:36.124z",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["03t11:45:36.124z'})@isdatestring()@isoptional",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":371,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.1.30",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["100",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.0",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":294,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":291,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":372,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.1.0",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["200",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["2025",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255})@isstring()@isnotempty()@minlength(3)@maxlength(255)@matches(/^[a",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255})@isstring()@isnotempty()@minlength(4)@maxlength(255",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4.1.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":683,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.16.3",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["96",{"_index":378,"title":{},"body":{"entities/User.html":{}}}],["_id",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["_limit",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["_page",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":614,"title":{},"body":{"index.html":{}}}],["already",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":664,"title":{},"body":{"index.html":{}}}],["api",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["apioperation",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiresponse({status",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":566,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":78,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":671,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["aws",{"_index":602,"title":{},"body":{"index.html":{}}}],["backers",{"_index":665,"title":{},"body":{"index.html":{}}}],["based",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["blog",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["board",{"_index":657,"title":{},"body":{"index.html":{}}}],["body",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":681,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":679,"title":{},"body":{"modules.html":{}}}],["building",{"_index":561,"title":{},"body":{"index.html":{}}}],["business",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":629,"title":{},"body":{"index.html":{}}}],["character",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":613,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":597,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":357,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":358,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":359,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":436,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":437,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":438,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":387,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":375,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":620,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(getuserparamdto",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(isauth",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchuserdto",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(user",{"_index":370,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional()@minlength(3)@maxlength(255",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":635,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":509,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["createpost",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":119,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostdto})@apioperation({summary",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto})@post",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptionsdto",{"_index":147,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":257,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["db",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":631,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":586,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":601,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":593,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":612,"title":{},"body":{"index.html":{}}}],["description",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":643,"title":{},"body":{"index.html":{}}}],["discord",{"_index":628,"title":{},"body":{"index.html":{}}}],["dive",{"_index":630,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":510,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":301,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["dto.ts",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:102",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:11",{"_index":300,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dto.ts:113",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:147",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:32",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:41",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:57",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:67",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:77",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:86",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts:94",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":581,"title":{},"body":{"index.html":{}}}],["each",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":562,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":591,"title":{},"body":{"index.html":{}}}],["email",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{}}}],["endpoint.'})@apibody({type",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["endpoint.'})@patch",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["ensure",{"_index":589,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":647,"title":{},"body":{"index.html":{}}}],["entities",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":373,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":550,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":633,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":605,"title":{},"body":{"index.html":{}}}],["featured",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":616,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetching",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["few",{"_index":607,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filters",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":368,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(_id",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["fns",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":615,"title":{},"body":{"index.html":{}}}],["follow",{"_index":651,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":560,"title":{},"body":{"index.html":{}}}],["full",{"_index":646,"title":{},"body":{"index.html":{}}}],["function",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":555,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":610,"title":{},"body":{"index.html":{}}}],["get('{/:id",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:id}')@apioperation({summary",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('{/:userid",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["getrepository",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserparamdto",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":286,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":638,"title":{},"body":{"index.html":{}}}],["grow",{"_index":661,"title":{},"body":{"index.html":{}}}],["handle",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["handles",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":632,"title":{},"body":{"index.html":{}}}],["handy",{"_index":621,"title":{},"body":{"index.html":{}}}],["hello",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":636,"title":{},"body":{"index.html":{}}}],["here",{"_index":669,"title":{},"body":{"index.html":{}}}],["host",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":675,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{}}}],["identifier",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["image",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":68,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":595,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":618,"title":{},"body":{"index.html":{}}}],["inject",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":65,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":609,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":571,"title":{},"body":{"index.html":{}}}],["instance",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["integrates",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{}}}],["interact",{"_index":639,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdatestring",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatusenum",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypeenum",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":293,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isjson",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail()@maxlength(96",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":254,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(96",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(2)@maxlength(96",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itay",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["items",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane@doe.com",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":654,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":656,"title":{},"body":{"index.html":{}}}],["john",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":667,"title":{},"body":{"index.html":{}}}],["json",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":672,"title":{},"body":{"index.html":{}}}],["key",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":624,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":377,"title":{},"body":{"entities/User.html":{}}}],["letter",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":678,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":659,"title":{},"body":{"index.html":{}}}],["lightweight",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["limit",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":653,"title":{},"body":{"index.html":{}}}],["list",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["localhost",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":596,"title":{},"body":{"index.html":{}}}],["loop",{"_index":649,"title":{},"body":{"index.html":{}}}],["makes",{"_index":603,"title":{},"body":{"index.html":{}}}],["managing",{"_index":617,"title":{},"body":{"index.html":{}}}],["matches",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["mau",{"_index":599,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(255",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(4",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":549,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":658,"title":{},"body":{"index.html":{}}}],["mode",{"_index":575,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":594,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":673,"title":{},"body":{"index.html":{}}}],["name",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":644,"title":{},"body":{"index.html":{}}}],["nest",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestframework",{"_index":677,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":307,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":611,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":559,"title":{},"body":{"index.html":{}}}],["npm",{"_index":570,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":379,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":655,"title":{},"body":{"index.html":{}}}],["official",{"_index":600,"title":{},"body":{"index.html":{}}}],["one",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":660,"title":{},"body":{"index.html":{}}}],["operations",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":253,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:5",{"_index":255,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:8",{"_index":256,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":682,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":527,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":289,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":292,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":645,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":302,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":306,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchedpostdto",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":295,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostdto})@apioperation({summary",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":304,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["perform",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"}'})@isoptional()@isjson",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":598,"title":{},"body":{"index.html":{}}}],["please",{"_index":627,"title":{},"body":{"index.html":{}}}],["port",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":592,"title":{},"body":{"index.html":{}}}],["post",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post's",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":361,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":310,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":341,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatusenum",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatusenum})@isenum(poststatusenum)@isnotempty",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttypeenum",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttypeenum})@isenum(posttypeenum)@isnotempty",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":383,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":577,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":558,"title":{},"body":{"index.html":{}}}],["project",{"_index":568,"title":{},"body":{"index.html":{}}}],["properties",{"_index":124,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('limit",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.'})@apiquery({name",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":625,"title":{},"body":{"index.html":{}}}],["read",{"_index":668,"title":{},"body":{"index.html":{}}}],["readme",{"_index":557,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":585,"title":{},"body":{"index.html":{}}}],["real",{"_index":640,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["required",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["requiring",{"_index":606,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":619,"title":{},"body":{"index.html":{}}}],["response",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["retrieve",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["return",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":687,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":572,"title":{},"body":{"index.html":{}}}],["runs",{"_index":590,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":563,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["section",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["serialize",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":564,"title":{},"body":{"index.html":{}}}],["service",{"_index":367,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":569,"title":{},"body":{"index.html":{}}}],["side",{"_index":565,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":608,"title":{},"body":{"index.html":{}}}],["single",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":290,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":663,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":516,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":554,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":360,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":362,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":366,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":287,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":305,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:15",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:57",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:85",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":374,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":382,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":385,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":381,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":386,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":384,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":573,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":576,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":578,"title":{},"body":{"index.html":{}}}],["starter",{"_index":567,"title":{},"body":{"index.html":{}}}],["statements",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status.enum.ts",{"_index":552,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":648,"title":{},"body":{"index.html":{}}}],["steps",{"_index":587,"title":{},"body":{"index.html":{}}}],["store",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["story",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":604,"title":{},"body":{"index.html":{}}}],["string",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":626,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":680,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":588,"title":{},"body":{"index.html":{}}}],["test",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["test:covdeployment",{"_index":583,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":582,"title":{},"body":{"index.html":{}}}],["testkey",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tests",{"_index":579,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":662,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":369,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":641,"title":{},"body":{"index.html":{}}}],["title",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":670,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/User.html":{}}}],["true})@maxlength(255",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":676,"title":{},"body":{"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type.enum.ts",{"_index":553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":388,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":443,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":308,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isoptional()@isstring({each",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":380,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":580,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["unlicensed",{"_index":686,"title":{},"body":{"properties.html":{}}}],["update",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":303,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated.'})@isint()@isnotempty",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchedpostdto",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":650,"title":{},"body":{"index.html":{}}}],["url",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["used",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":44,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":309,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":288,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":389,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":98,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":642,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":376,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":684,"title":{},"body":{"properties.html":{}}}],["video",{"_index":634,"title":{},"body":{"index.html":{}}}],["visit",{"_index":623,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":637,"title":{},"body":{"index.html":{}}}],["want",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":574,"title":{},"body":{"index.html":{}}}],["website",{"_index":674,"title":{},"body":{"index.html":{}}}],["what's",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["without",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":622,"title":{},"body":{"index.html":{}}}],["x",{"_index":652,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":666,"title":{},"body":{"index.html":{}}}],["you're",{"_index":584,"title":{},"body":{"index.html":{}}}],["z0",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[^a",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: 'itay',\n        database: 'nestjs-blog',\n        entities: [User],\n        //should only be in true in development\n        synchronize: true,\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Nest!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    // check user exists in db\n    const user = this.usersService.findOneById('1234');\n\n    // login\n    // token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'This is the test post's content'})@IsString()@IsOptional()@MinLength(3)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The featured image URL of the post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, description: 'The meta options of the post', example: undefined, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the post. Can be post, page, story, or series.', example: 'post', enum: PostTypeEnum})@IsEnum(PostTypeEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post was published', example: '2025-10-03T11:45:36.124Z'})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', example: 'new-with-nestjs', minLength: 3, maxLength: 255})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and use only \"-\" and without spaces. For example \"my-url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The status of the post. Can be draft, scheduled, review, or published.', example: 'draft', enum: PostStatusEnum})@IsEnum(PostStatusEnum)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The tags of the post', example: undefined})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})@MaxLength(255, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', example: 'What's new with NestJS?', minLength: 4, maxLength: 255})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostTypeEnum } from '../enums/post-type.enum';\nimport { PostStatusEnum } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    example: \"What's new with NestJS?\",\n    minLength: 4,\n    maxLength: 255,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(255)\n  title: string;\n\n  @ApiProperty({\n    description: 'The type of the post. Can be post, page, story, or series.',\n    example: 'post',\n    enum: PostTypeEnum,\n  })\n  @IsEnum(PostTypeEnum)\n  @IsNotEmpty()\n  postType: PostTypeEnum;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    example: 'new-with-nestjs',\n    minLength: 3,\n    maxLength: 255,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and use only \"-\" and without spaces. For example \"my-url',\n  })\n  slug: string;\n\n  @ApiProperty({\n    description:\n      'The status of the post. Can be draft, scheduled, review, or published.',\n    example: 'draft',\n    enum: PostStatusEnum,\n  })\n  @IsEnum(PostStatusEnum)\n  @IsNotEmpty()\n  status: PostStatusEnum;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: \"This is the test post's content\",\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(255)\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'The featured image URL of the post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post was published',\n    example: '2025-10-03T11:45:36.124Z',\n  })\n  @IsDateString()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'The tags of the post',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  @MaxLength(255, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    description: 'The meta options of the post',\n    example: [\n      {\n        key: 'testKey',\n        value: 20,\n      },\n    ],\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description:\n            'The value can be any value you want to store for your meta option',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).+$/, {message: 'Minimum 8 characters password, it must contain at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(2)\n  @MaxLength(96)\n  lastName: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).+$/, {\n    message:\n      'Minimum 8 characters password, it must contain at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to be updated.'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post-dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post to be updated.',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'You get a 201 response if your post created successfully.', type: CreatePostDto})@ApiOperation({summary: 'Create a new post', description: 'You can create a new post with this endpoint.'})@ApiBody({type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:userId}')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        GET localhost:3000/posts/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchedPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'You get a 200 response if your post updated successfully.', type: PatchPostDto})@ApiOperation({summary: 'Update a post', description: 'You can update a post with this endpoint.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchedPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchPostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post-dto';\nimport { PatchPostDto } from './dtos/patch-post-dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('{/:userId}')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post created successfully.',\n    type: CreatePostDto,\n  })\n  @ApiOperation({\n    summary: 'Create a new post',\n    description: 'You can create a new post with this endpoint.',\n  })\n  @ApiBody({\n    type: CreatePostDto,\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return createPostDto;\n  }\n\n  @ApiResponse({\n    status: 200,\n    description: 'You get a 200 response if your post updated successfully.',\n    type: PatchPostDto,\n  })\n  @ApiOperation({\n    summary: 'Update a post',\n    description: 'You can update a post with this endpoint.',\n  })\n  @Patch()\n  public updatePost(@Body() patchedPostDto: PatchPostDto) {\n    return patchedPostDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    // Users Service\n    // Find a User\n\n    const user = this.usersService.findOneById(userId);\n\n    console.log(user);\n\n    return [\n      { user, title: 'Post 1', content: 'Content 1' },\n      { user, title: 'Post 2', content: 'Content 2' },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'users' })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('{/:id}')@ApiOperation({summary: 'Fetches a list of registered users of the application.'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query.'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number you want to API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('{/:id}')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users of the application.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query.',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page number you want to API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    console.log(patchUserDto);\n\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { User } from './user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to connect to the Users data source and perform business operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            Inject dependencies required by the service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Instance of AuthService used for authentication checks.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Create a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user data to create.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, _limit: number, _page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieve a paginated list of users matching the provided filters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Filters and query parameters for fetching users.\n\n                                            \n                                        \n                                        \n                                                _limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Maximum number of users to return per page.\n\n                                            \n                                        \n                                        \n                                                _page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Page number to retrieve (1-based).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                A list of lightweight user objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Retrieve a single user by their unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                _id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the user.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; }\n\n                        \n                            \n                                A lightweight user object if found.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { User } from '../user.entity';\nimport { getRepository, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n * Service to connect to the Users data source and perform business operations.\n *\n * @description Handles user-related operations and integrates with `AuthService`.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Inject dependencies required by the service.\n   *\n   * @param authService Instance of `AuthService` used for authentication checks.\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Create a new user.\n   *\n   * @param createUserDto The user data to create.\n   * @returns The created user.\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    // check if user already exists\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    // handle exception -- for next section\n\n    // create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n\n  /**\n   * Retrieve a paginated list of users matching the provided filters.\n   *\n   * @param getUserParamDto Filters and query parameters for fetching users.\n   * @param _limit Maximum number of users to return per page.\n   * @param _page Page number to retrieve (1-based).\n   * @returns A list of lightweight user objects.\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    _limit: number,\n    _page: number,\n  ) {\n    console.log(getUserParamDto);\n    const isAuth = this.authService.isAuth();\n\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Jane',\n        email: 'jane@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieve a single user by their unique identifier.\n   *\n   * @param _id The unique identifier of the user.\n   * @returns A lightweight user object if found.\n   */\n  public findOneById(_id: string) {\n    return {\n      firstName: 'Alice',\n      email: 'alice@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/posts/dtos/create-post-dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/posts/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.30\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            date-fns : ^4.1.0\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatusEnum   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostTypeEnum   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatusEnum\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostTypeEnum\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
